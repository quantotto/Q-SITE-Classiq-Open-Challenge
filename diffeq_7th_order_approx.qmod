qfunc prep_qubits(Vs1: real[][], normalized_x0: real[], approximator: qbit[], phi: qbit) {
  unitary(Vs1, approximator);
  inplace_prepare_amplitudes(normalized_x0, 0.01, phi);
}

qfunc encode(V: real[], Vs1: real[][], normalized_x0: real[], ancilla: qbit, approximator: qbit[], phi: qbit) {
  unitary(V, ancilla);
  control (ancilla == 0) {
    prep_qubits(Vs1, normalized_x0, approximator, phi);
  }
}

qfunc approximate(A: real[][], approximator: qnum, phi: qbit) {
  repeat (i: 2 ** approximator.size) {
    control (approximator == i) {
      power (i) {
        unitary(A, phi);
      }
    }
  }
}

qfunc main(output phi: qbit, output approximator: qnum, output ancilla: qbit) {
  allocate(1, phi);
  allocate(3, approximator);
  allocate(1, ancilla);
  within {
    encode([[1, 0], [0, (-1)]], [
      [
        0.8681,
        0.4963,
        (-0.0),
        (-0.0),
        (-0.0),
        (-0.0),
        (-0.0),
        (-0.0)
      ],
      [
        0.4617,
        (-0.8075),
        0.3671,
        (-0.0),
        (-0.0),
        (-0.0),
        (-0.0),
        (-0.0)
      ],
      [
        0.1736,
        (-0.3037),
        (-0.8864),
        0.3033,
        0.0,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0533,
        (-0.0932),
        (-0.2722),
        (-0.9191),
        0.264,
        0.0,
        0.0,
        0.0
      ],
      [
        0.0142,
        (-0.0248),
        (-0.0724),
        (-0.2444),
        (-0.9371),
        0.2367,
        0.0,
        0.0
      ],
      [
        0.0034,
        (-0.0059),
        (-0.0172),
        (-0.0581),
        (-0.2229),
        (-0.9486),
        0.2162,
        0.0
      ],
      [
        0.0007,
        (-0.0013),
        (-0.0037),
        (-0.0126),
        (-0.0484),
        (-0.206),
        (-0.9572),
        0.1971
      ],
      [
        0.0001,
        (-0.0003),
        (-0.0008),
        (-0.0025),
        (-0.0097),
        (-0.0414),
        (-0.1924),
        (-0.9804)
      ]
    ], [0.7071, 0.7071], ancilla, approximator, phi);
  } apply {
    approximate([[0, 1], [(-1), 0]], approximator, phi);
  }
}
